<?php

namespace Richpolis\FrontendBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Richpolis\BackendBundle\Entity\Usuario;

/**
 * EstadoCuentaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EstadoCuentaRepository extends EntityRepository
{
    public function queryFindEstadoCuentas($buscar = "", $edificio, $pagadas)
    {
        $em = $this->getEntityManager();
        if(strlen($buscar)==0){
            $consulta = $em->createQuery("SELECT t,u,e,r "
                    . "FROM FrontendBundle:EstadoCuenta t "
                    . "JOIN t.usuario u "
                    . "JOIN u.edificio e "
                    . "JOIN e.residencial r "
                    . "WHERE u.edificio=:edificio "
                    . "AND t.isPaid=:pagadas "
                    . "ORDER BY t.createdAt DESC, u.numero ASC");
            $consulta->setParameters(array(
                'edificio' => $edificio,
                'pagadas' => $pagadas,
            ));
        }else{
            $consulta = $em->createQuery("SELECT t,u,e,r "
                    . "FROM FrontendBundle:EstadoCuenta t "
                    . "JOIN t.usuario u "
                    . "JOIN u.edificio e "
                    . "JOIN e.residencial r "
                    . "WHERE u.edificio=:edificio "
                    . "AND t.isPaid=:pagadas "
                    . "AND (u.numero =:numero OR u.nombre LIKE :nombre OR u.email LIKE :email) "
                    . "ORDER BY t.createdAt DESC, u.numero ASC");
            $consulta->setParameters(array(
                'edificio' => $edificio,
                'pagadas' => $pagadas,
                'numero' => $buscar,
                'nombre' => "%".$buscar."%",
                'email' => "%".$buscar."%"
            ));
        }
        return $consulta;
    }
    
    public function findEstadoCuentas($buscar = "", $edificio,$pagadas){
        return $this->queryFindEstadoCuentas($buscar,$edificio,$pagadas)->getResult();
    }
    
    public function queryCargosAdeudoPorEdificio($edificio_id,$todos=true){
        $em=$this->getEntityManager();
        $query = $em->createQueryBuilder();
        $query
                ->select('t,u,e,r')
                ->from('Richpolis\FrontendBundle\Entity\EstadoCuenta', 't')
                ->join('t.usuario', 'u')
                ->join('u.edificio', 'e')
                ->join('e.residencial', 'r')
                ->where('e.id=:edificio')
                ->setParameter('edificio', $edificio_id)
                ->orderBy('u.numero','ASC')
        ;
        if(!$todos){
            $query->andWhere('t.isPaid=:is_paid')
                  ->setParameter('is_paid', false);
        }
        return $query->getQuery();
    }
    
    public function getCargosAdeudoPorEdificio($edificio_id,$todos=true){
        $query = $this->queryCargosAdeudoPorEdificio($edificio_id, $todos);
        return $query->getResult();
    }
    
    public function getCargosAdeudoPorUsuario($usuario_id,$todos=true){
        $em=$this->getEntityManager();
        $query = $em->createQueryBuilder();
        $query
                ->select('t,u,e,r')
                ->from('Richpolis\FrontendBundle\Entity\EstadoCuenta', 't')
                ->join('t.usuario', 'u')
                ->join('u.edificio', 'e')
                ->join('e.residencial', 'r')
                ->where('u.id=:usuario')
                ->setParameter('usuario', $usuario_id)
                ->orderBy('u.numero','ASC')
        ;
        if(!$todos){
            $query->andWhere('t.isPaid=:is_paid')
                  ->setParameter('is_paid', false);
        }
        return $query->getQuery()->getResult();
    }
    
    public function getCargoEnMes($mes, $year, $tipoCargo, Usuario $usuario)
    {
        $em = $this->getEntityManager();
            $consulta = $em->createQuery(
                "SELECT c "
                . "FROM FrontendBundle:EstadoCuenta c "
                . "JOIN c.usuario u " 
                . "WHERE MONTH(c.createdAt)=:mes "
                . "AND YEAR(c.createdAt)=:year "
                . "AND c.tipoCargo=:tipo "
                . "AND u.id=:usuario");
            $consulta->setParameters(array(
                'mes'=>$mes,
                'year'=>$year,
                'tipo'=>$tipoCargo,
                'usuario'=>$usuario->getId(),
            ));
       $resultados =  $consulta->getResult();
       if(isset($resultados[0])){
           return $resultados[0];
       }else{
           return null;
       }
    }
	
    public function getCargosEnMes($mes, $year, Usuario $usuario)
    {
        $em = $this->getEntityManager();
            $consulta = $em->createQuery(
                "SELECT c "
                . "FROM FrontendBundle:EstadoCuenta c "
                . "JOIN c.usuario u " 
                . "WHERE MONTH(c.createdAt)=:mes "
                . "AND YEAR(c.createdAt)=:year "
                . "AND u.id=:usuario");
            $consulta->setParameters(array(
                'mes'=>$mes,
                'year'=>$year,
                'usuario'=>$usuario->getId(),
            ));
       return  $consulta->getResult();       
    }
    
    public function getCargosAnteriores($fecha, Usuario $usuario){
        $em = $this->getEntityManager();
        $consulta = $em->createQuery(
            "SELECT c "
            . "FROM FrontendBundle:EstadoCuenta c "
            . "JOIN c.usuario u "
            . "WHERE c.createdAt<=:fecha "
            . "AND c.isAcumulable=:acumulable "
            . "AND u.id=:usuario");
        $consulta->setParameters(array(
            'fecha' => $fecha,
            'acumulable' => true,
            'usuario' => $usuario->getId(),
        ));
        return $consulta->getResult();
    }
}
