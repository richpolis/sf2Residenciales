<?php

namespace Richpolis\FrontendBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints  as Assert;

/**
 * Reservacion
 *
 * @ORM\Table(name="reservaciones")
 * @ORM\Entity(repositoryClass="Richpolis\FrontendBundle\Repository\ReservacionRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Reservacion
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var \Recurso
     * @todo Recurso solicitado
     *
     * @ORM\ManyToOne(targetEntity="Richpolis\BackendBundle\Entity\Recurso")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="recurso_id", referencedColumnName="id")
     * })
     */
    private $recurso;

    /**
     * @var \Usuario
     * @todo Usuario que solicito la reservacion
     *
     * @ORM\ManyToOne(targetEntity="Richpolis\BackendBundle\Entity\Usuario")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="usuario_id", referencedColumnName="id")
     * })
     */
    private $usuario;    
    
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="fechaEvento", type="date",nullable=true)
     * @Assert\NotBlank(message="Ingresa la fecha del evento")
     * @Assert\Date()
     */
    private $fechaEvento;
    
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="desde", type="time",nullable=true)
     */
    private $desde;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="hasta", type="time",nullable=true)
     */
    private $hasta;

    /**
     * @var boolean
     *
     * @ORM\Column(name="is_aproved", type="boolean", nullable=true)
     */
    private $isAproved = false;
	
	/**
     * @var decimal
     *
     * @ORM\Column(name="monto", type="decimal", nullable=true)
     */
    private $monto;
	
	/**
     * @var \Pago
     * @todo Pago de la reservacion
     *
     * @ORM\ManyToOne(targetEntity="Pago")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="pago_id", referencedColumnName="id")
     * })
     */
    private $pago;
    
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="created_at", type="datetime")
     */
    private $createdAt;
    
    /*
     * Timestable
     */
    
    /**
     * @ORM\PrePersist
     */
    public function setCreatedAtValue()
    {
        if(!$this->getCreatedAt())
        {
          $this->createdAt = new \DateTime();
        }
    }
    
    public function __construct() {
        $this->isAproved = false;
		$this->monto = 0;
    }
    
    public function getStringReservacion(){
        return sprintf("Recurso %s reservacion por usuario %s - %s", 
                $this->getRecurso(),$this->getUsuario()->getNumero(),$this->getUsuario());
    }
    

   
}
